<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trình chỉnh sửa ảnh cơ bản</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6; /* Màu nền xám nhạt */
        }
        .control-panel {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .control-panel h3 {
            font-size: 1.125rem; /* 18px */
            font-weight: 600;
            margin-bottom: 1rem;
            color: #1f2937; /* Màu chữ xám đậm */
        }
        .control-group {
            margin-bottom: 1.5rem;
        }
        .control-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #374151; /* Màu chữ xám trung bình */
        }
        .control-group input[type="range"] {
            width: 100%;
            cursor: pointer;
        }
        .filter-btn, .action-btn {
            background-color: #3b82f6; /* Màu xanh dương */
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem; /* 6px */
            border: none;
            cursor: pointer;
            transition: background-color 0.3s;
            font-weight: 500;
        }
        .filter-btn:hover, .action-btn:hover {
            background-color: #2563eb; /* Màu xanh dương đậm hơn khi hover */
        }
        .filter-btn.active {
            background-color: #1d4ed8; /* Màu xanh dương đậm hơn cho nút active */
        }
        .canvas-container {
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #e5e7eb; /* Màu nền xám nhạt hơn cho vùng canvas */
            border-radius: 8px;
            overflow: hidden;
            min-height: 300px; /* Chiều cao tối thiểu cho vùng canvas */
        }
        canvas {
            max-width: 100%;
            max-height: 70vh; /* Chiều cao tối đa của canvas */
            object-fit: contain;
            border-radius: 4px;
        }
        .hidden {
            display: none;
        }
        /* Thông báo */
        .message-box {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #10b981; /* Màu xanh lá */
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 0.375rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            z-index: 1000;
            opacity: 0;
            transition: opacity 0.5s ease-in-out;
        }
        .message-box.show {
            opacity: 1;
        }
        .message-box.error {
            background-color: #ef4444; /* Màu đỏ */
        }
    </style>
</head>
<body class="p-4 md:p-8">
    <div class="container mx-auto max-w-6xl">
        <header class="text-center mb-8">
            <h1 class="text-3xl md:text-4xl font-bold text-gray-800">Trình chỉnh sửa ảnh cơ bản</h1>
            <p class="text-gray-600 mt-2">Tải ảnh lên và thử các công cụ chỉnh sửa.</p>
        </header>

        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div class="md:col-span-1 control-panel">
                <div>
                    <label for="imageLoader" class="block mb-2 text-sm font-medium text-gray-900">Tải ảnh lên:</label>
                    <input type="file" id="imageLoader" accept="image/*" class="block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 focus:outline-none p-2">
                </div>

                <div class="mt-6 control-group" id="controlsContainer" class="hidden">
                    <h3>Nâng cao chất lượng</h3>
                    <div>
                        <label for="brightness">Độ sáng:</label>
                        <input type="range" id="brightness" min="0" max="200" value="100">
                    </div>
                    <div class="mt-4">
                        <label for="contrast">Độ tương phản:</label>
                        <input type="range" id="contrast" min="0" max="200" value="100">
                    </div>
                    <div class="mt-4">
                        <label for="saturation">Độ bão hòa:</label>
                        <input type="range" id="saturation" min="0" max="200" value="100">
                    </div>
                     <div class="mt-4">
                        <label for="blur">Làm mờ (Blur):</label>
                        <input type="range" id="blur" min="0" max="10" value="0" step="0.1">
                    </div>
                </div>

                <div class="mt-6 control-group" id="filtersContainer" class="hidden">
                    <h3>Bộ lọc</h3>
                    <div class="grid grid-cols-2 gap-2">
                        <button class="filter-btn" data-filter="grayscale">Thang độ xám</button>
                        <button class="filter-btn" data-filter="sepia">Nâu đỏ</button>
                        <button class="filter-btn" data-filter="invert">Đảo ngược</button>
                        <button class="filter-btn" data-filter="vintage">Cổ điển</button>
                        </div>
                </div>

                <div class="mt-8 space-y-3" id="actionsContainer" class="hidden">
                    <h3>Thao tác</h3>
                    <button id="resetControls" class="w-full action-btn bg-yellow-500 hover:bg-yellow-600">Đặt lại chỉnh sửa</button>
                    <button id="downloadImage" class="w-full action-btn bg-green-500 hover:bg-green-600">Tải ảnh xuống</button>
                </div>
            </div>

            <div class="md:col-span-2 canvas-container">
                <canvas id="imageCanvas"></canvas>
                <p id="canvasPlaceholder" class="text-gray-500">Chưa có ảnh nào được chọn. Vui lòng tải ảnh lên.</p>
            </div>
        </div>
    </div>

    <div id="messageBox" class="message-box"></div>

    <script>
        const imageLoader = document.getElementById('imageLoader');
        const canvas = document.getElementById('imageCanvas');
        const ctx = canvas.getContext('2d');
        const canvasPlaceholder = document.getElementById('canvasPlaceholder');

        // Các thanh điều khiển
        const brightnessSlider = document.getElementById('brightness');
        const contrastSlider = document.getElementById('contrast');
        const saturationSlider = document.getElementById('saturation');
        const blurSlider = document.getElementById('blur');


        // Các nút
        const resetControlsBtn = document.getElementById('resetControls');
        const downloadImageBtn = document.getElementById('downloadImage');
        const filterButtons = document.querySelectorAll('.filter-btn');

        // Container của các control
        const controlsContainer = document.getElementById('controlsContainer');
        const filtersContainer = document.getElementById('filtersContainer');
        const actionsContainer = document.getElementById('actionsContainer');

        let originalImage = null; // Lưu trữ ảnh gốc để reset
        let currentImage = null; // Ảnh hiện tại đang được chỉnh sửa
        let currentFilters = {
            brightness: 100,
            contrast: 100,
            saturation: 100,
            grayscale: 0,
            sepia: 0,
            invert: 0,
            blur: 0,
            // Thêm các giá trị mặc định cho bộ lọc khác ở đây
            vintage: false // Ví dụ cho bộ lọc cổ điển
        };
        let activeFilterButton = null; // Theo dõi nút bộ lọc đang được chọn

        // Hàm hiển thị thông báo
        function showMessage(message, type = 'success', duration = 3000) {
            const messageBox = document.getElementById('messageBox');
            messageBox.textContent = message;
            messageBox.className = `message-box ${type}`; // Thêm class 'error' nếu là lỗi
            messageBox.classList.add('show');
            setTimeout(() => {
                messageBox.classList.remove('show');
            }, duration);
        }

        // Xử lý tải ảnh lên
        imageLoader.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    originalImage = new Image();
                    originalImage.onload = () => {
                        currentImage = originalImage;
                        // Đặt kích thước canvas bằng kích thước ảnh gốc nhưng giới hạn bởi max-width/height
                        const MAX_WIDTH = canvas.parentElement.clientWidth * 0.9; // 90% chiều rộng của parent
                        const MAX_HEIGHT = window.innerHeight * 0.7; // 70% chiều cao cửa sổ

                        let newWidth = originalImage.width;
                        let newHeight = originalImage.height;

                        if (newWidth > MAX_WIDTH) {
                            newHeight *= MAX_WIDTH / newWidth;
                            newWidth = MAX_WIDTH;
                        }

                        if (newHeight > MAX_HEIGHT) {
                            newWidth *= MAX_HEIGHT / newHeight;
                            newHeight = MAX_HEIGHT;
                        }
                        canvas.width = newWidth;
                        canvas.height = newHeight;

                        resetAllFiltersAndDraw(); // Vẽ ảnh gốc lên canvas và reset filter
                        canvasPlaceholder.classList.add('hidden');
                        canvas.classList.remove('hidden');
                        controlsContainer.classList.remove('hidden');
                        filtersContainer.classList.remove('hidden');
                        actionsContainer.classList.remove('hidden');
                        showMessage('Tải ảnh lên thành công!', 'success');
                    }
                    originalImage.onerror = () => {
                        showMessage('Không thể tải ảnh. Định dạng không được hỗ trợ hoặc tệp bị lỗi.', 'error');
                        canvasPlaceholder.classList.remove('hidden');
                        canvas.classList.add('hidden');
                        controlsContainer.classList.add('hidden');
                        filtersContainer.classList.add('hidden');
                        actionsContainer.classList.add('hidden');
                    }
                    originalImage.src = e.target.result;
                }
                reader.readAsDataURL(file);
            } else {
                // Nếu không chọn file nào (ví dụ, nhấn cancel)
                if (!originalImage) { // Chỉ ẩn nếu chưa có ảnh nào được tải trước đó
                    canvasPlaceholder.classList.remove('hidden');
                    canvas.classList.add('hidden');
                    controlsContainer.classList.add('hidden');
                    filtersContainer.classList.add('hidden');
                    actionsContainer.classList.add('hidden');
                }
            }
        });

        // Hàm áp dụng các thay đổi và vẽ lại ảnh
        function applyChangesAndRedraw() {
            if (!currentImage) return;

            // Tạo một canvas tạm để xử lý ảnh gốc mà không làm thay đổi nó
            const tempCanvas = document.createElement('canvas');
            const tempCtx = tempCanvas.getContext('2d');
            tempCanvas.width = originalImage.width; // Sử dụng kích thước gốc
            tempCanvas.height = originalImage.height;

            // Áp dụng các bộ lọc CSS vào context của canvas tạm
            let filterString = '';
            filterString += `brightness(${currentFilters.brightness}%) `;
            filterString += `contrast(${currentFilters.contrast}%) `;
            filterString += `saturate(${currentFilters.saturation}%) `;
            filterString += `grayscale(${currentFilters.grayscale}%) `;
            filterString += `sepia(${currentFilters.sepia}%) `;
            filterString += `invert(${currentFilters.invert}%) `;
            filterString += `blur(${currentFilters.blur}px) `;


            tempCtx.filter = filterString.trim();
            tempCtx.drawImage(originalImage, 0, 0, originalImage.width, originalImage.height);


            // Xử lý bộ lọc tùy chỉnh (ví dụ: vintage) không có trong CSS filter
            if (currentFilters.vintage) {
                applyVintageFilter(tempCtx, tempCanvas.width, tempCanvas.height);
            }

            // Vẽ ảnh đã xử lý từ canvas tạm lên canvas chính (đã được resize)
            ctx.clearRect(0, 0, canvas.width, canvas.height); // Xóa canvas chính
            ctx.drawImage(tempCanvas, 0, 0, canvas.width, canvas.height); // Vẽ lại với kích thước hiển thị
        }

        // Hàm áp dụng bộ lọc Cổ điển (Vintage)
        function applyVintageFilter(context, width, height) {
            // Đây là một ví dụ đơn giản, bạn có thể tùy chỉnh các giá trị này
            // Làm cho ảnh hơi ngả vàng và giảm độ tương phản nhẹ
            context.globalCompositeOperation = 'multiply';
            context.fillStyle = 'rgba(255, 210, 100, 0.15)'; // Lớp màu vàng nhạt
            context.fillRect(0, 0, width, height);
            context.globalCompositeOperation = 'source-over'; // Reset lại

            // Giảm độ bão hòa một chút (có thể cần điều chỉnh thêm)
            // Vì CSS filter đã có saturate, bộ lọc này có thể phức tạp hơn
            // hoặc bạn có thể kết hợp với các thao tác pixel trực tiếp
            const imageData = context.getImageData(0, 0, width, height);
            const data = imageData.data;
            for (let i = 0; i < data.length; i += 4) {
                // Giảm nhẹ độ bão hòa bằng cách làm cho các màu gần xám hơn
                const r = data[i];
                const g = data[i+1];
                const b = data[i+2];
                const gray = 0.299 * r + 0.587 * g + 0.114 * b; // Độ xám trung bình
                data[i] = r * 0.8 + gray * 0.2;
                data[i+1] = g * 0.8 + gray * 0.2;
                data[i+2] = b * 0.8 + gray * 0.2;
            }
            context.putImageData(imageData, 0, 0);
        }


        // Lắng nghe sự kiện thay đổi trên các thanh trượt
        brightnessSlider.addEventListener('input', (e) => {
            currentFilters.brightness = e.target.value;
            applyChangesAndRedraw();
        });
        contrastSlider.addEventListener('input', (e) => {
            currentFilters.contrast = e.target.value;
            applyChangesAndRedraw();
        });
        saturationSlider.addEventListener('input', (e) => {
            currentFilters.saturation = e.target.value;
            applyChangesAndRedraw();
        });
         blurSlider.addEventListener('input', (e) => {
            currentFilters.blur = e.target.value;
            applyChangesAndRedraw();
        });


        // Xử lý các nút bộ lọc
        filterButtons.forEach(button => {
            button.addEventListener('click', () => {
                const filterType = button.dataset.filter;

                // Bỏ active nút cũ (nếu có)
                if (activeFilterButton && activeFilterButton !== button) {
                    activeFilterButton.classList.remove('active');
                    // Reset bộ lọc của nút cũ nếu cần
                    if (activeFilterButton.dataset.filter === 'vintage') {
                         currentFilters.vintage = false;
                    } else {
                        currentFilters[activeFilterButton.dataset.filter] = 0; // Hoặc giá trị mặc định
                    }
                }


                // Chuyển đổi trạng thái bộ lọc
                if (filterType === 'grayscale' || filterType === 'sepia' || filterType === 'invert') {
                    if (currentFilters[filterType] > 0) { // Nếu đang active, tắt nó đi
                        currentFilters[filterType] = 0;
                        button.classList.remove('active');
                        activeFilterButton = null;
                    } else { // Nếu chưa active, bật nó và tắt các bộ lọc khác cùng loại
                        currentFilters.grayscale = 0;
                        currentFilters.sepia = 0;
                        currentFilters.invert = 0;
                        currentFilters[filterType] = 100; // Hoặc giá trị phù hợp cho bộ lọc (ví dụ: sepia(1))
                        button.classList.add('active');
                        activeFilterButton = button;
                    }
                } else if (filterType === 'vintage') {
                    currentFilters.vintage = !currentFilters.vintage; // Toggle
                     if (currentFilters.vintage) {
                        button.classList.add('active');
                        activeFilterButton = button;
                    } else {
                        button.classList.remove('active');
                        activeFilterButton = null;
                    }
                }
                // Tắt các bộ lọc khác khi một bộ lọc mới được chọn (trừ vintage có thể kết hợp)
                filterButtons.forEach(btn => {
                    if (btn !== button && btn.dataset.filter !== 'vintage') { // không reset nút vintage
                        btn.classList.remove('active');
                        if (btn.dataset.filter !== 'vintage') { // không reset giá trị của vintage
                           currentFilters[btn.dataset.filter] = 0;
                        }
                    }
                });
                 // Nếu nút được click là nút đang active (và không phải vintage), thì hủy active nó
                if (button.classList.contains('active') && button !== activeFilterButton && filterType !== 'vintage') {
                     button.classList.remove('active');
                     currentFilters[filterType] = 0;
                     activeFilterButton = null;
                } else if (filterType !== 'vintage') { // Nếu là bộ lọc mới (không phải vintage)
                     if(activeFilterButton && activeFilterButton.dataset.filter !== 'vintage') {
                        activeFilterButton.classList.remove('active');
                        currentFilters[activeFilterButton.dataset.filter] = 0;
                     }
                     button.classList.add('active');
                     currentFilters[filterType] = 100;
                     activeFilterButton = button;
                }


                applyChangesAndRedraw();
            });
        });

        // Hàm reset tất cả bộ lọc và vẽ lại ảnh gốc
        function resetAllFiltersAndDraw() {
            if (!originalImage) return;
            currentImage = originalImage; // Đặt lại ảnh hiện tại về ảnh gốc

            // Reset giá trị của các thanh trượt và bộ lọc
            brightnessSlider.value = 100;
            contrastSlider.value = 100;
            saturationSlider.value = 100;
            blurSlider.value = 0;

            currentFilters = {
                brightness: 100,
                contrast: 100,
                saturation: 100,
                grayscale: 0,
                sepia: 0,
                invert: 0,
                blur: 0,
                vintage: false
            };

            // Bỏ active tất cả các nút bộ lọc
            filterButtons.forEach(btn => btn.classList.remove('active'));
            activeFilterButton = null;

            // Vẽ lại ảnh gốc lên canvas chính (đã được resize)
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.filter = 'none'; // Đảm bảo không có filter CSS nào được áp dụng
            ctx.drawImage(originalImage, 0, 0, canvas.width, canvas.height);
            showMessage('Đã đặt lại tất cả chỉnh sửa.', 'success');
        }

        // Nút Reset
        resetControlsBtn.addEventListener('click', resetAllFiltersAndDraw);

        // Nút Tải xuống
        downloadImageBtn.addEventListener('click', () => {
            if (!currentImage) {
                showMessage('Không có ảnh để tải xuống.', 'error');
                return;
            }

            // Tạo một canvas tạm với kích thước gốc của ảnh để tải xuống chất lượng đầy đủ
            const downloadCanvas = document.createElement('canvas');
            const downloadCtx = downloadCanvas.getContext('2d');
            downloadCanvas.width = originalImage.width;
            downloadCanvas.height = originalImage.height;

            // Áp dụng các bộ lọc tương tự như hàm applyChangesAndRedraw nhưng cho downloadCtx
            let filterString = '';
            filterString += `brightness(${currentFilters.brightness}%) `;
            filterString += `contrast(${currentFilters.contrast}%) `;
            filterString += `saturate(${currentFilters.saturation}%) `;
            filterString += `grayscale(${currentFilters.grayscale}%) `;
            filterString += `sepia(${currentFilters.sepia}%) `;
            filterString += `invert(${currentFilters.invert}%) `;
            filterString += `blur(${currentFilters.blur}px) `;


            downloadCtx.filter = filterString.trim();
            downloadCtx.drawImage(originalImage, 0, 0, originalImage.width, originalImage.height);

            if (currentFilters.vintage) {
                applyVintageFilter(downloadCtx, downloadCanvas.width, downloadCanvas.height);
            }


            const dataURL = downloadCanvas.toDataURL('image/png'); // Hoặc 'image/jpeg'
            const link = document.createElement('a');
            link.href = dataURL;
            link.download = 'anh_da_chinh_sua.png'; // Tên tệp tải xuống
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            showMessage('Đang tải ảnh xuống...', 'success');
        });

        // Xử lý thay đổi kích thước cửa sổ để canvas không bị tràn
        window.addEventListener('resize', () => {
            if (originalImage) {
                // Tính toán lại kích thước canvas khi resize, tương tự như lúc tải ảnh
                const MAX_WIDTH = canvas.parentElement.clientWidth * 0.9;
                const MAX_HEIGHT = window.innerHeight * 0.7;

                let newWidth = originalImage.width;
                let newHeight = originalImage.height;

                if (newWidth > MAX_WIDTH) {
                    newHeight *= MAX_WIDTH / newWidth;
                    newWidth = MAX_WIDTH;
                }

                if (newHeight > MAX_HEIGHT) {
                    newWidth *= MAX_HEIGHT / newHeight;
                    newHeight = MAX_HEIGHT;
                }
                canvas.width = newWidth;
                canvas.height = newHeight;
                applyChangesAndRedraw(); // Vẽ lại ảnh với kích thước mới
            }
        });

        // Ban đầu ẩn các control cho đến khi có ảnh được tải
        controlsContainer.classList.add('hidden');
        filtersContainer.classList.add('hidden');
        actionsContainer.classList.add('hidden');
        canvas.classList.add('hidden');

    </script>
</body>
</html>
